<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>长刀, 一个老程序员.</title>
    <description>老程序员. 热爱编程，享受编程。
</description>
    <link>http://changdao.github.io/</link>
    <atom:link href="http://changdao.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 12 Oct 2016 10:50:25 +0800</pubDate>
    <lastBuildDate>Wed, 12 Oct 2016 10:50:25 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>jQuery匿名函数事件处理器定位与调试</title>
        <description>jQuery匿名函数事件处理器定位与调试
==========================
JavaScript调试的一个大问题就是：event handler的代码如何定位？

比如在实现页面交互时，某个控件的事件处理有一些多余的动作或者不符合预期的的行为，如何知道这些行为是如何发生的？如果自己写全部的代码，没有用其它的框架也好办，但是这在现在的开发团队和过程中很少的。有时候页面JS在控制台打印出了堆栈，但是你只能看到和jQuery相关，而实际事件处理代码具体在哪里，却完全没有头绪。
在实践中，我也经常遇到这种情况，处理办法是在Chrome中首先通过断点，然后定位到
&lt;pre&gt;
/*jquery.js 1.10.2 */
5094  ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler ).apply( matched.elem, args );
&lt;/pre&gt;

然后在控制台上键入下面的代码并回车。
&lt;pre&gt;
(jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler
&lt;/pre&gt;
查看该表达式的值。

通常，在控制台打印出来的是
&lt;pre&gt;
function anonymous(e)
&lt;/pre&gt;

单击“anonymous”，Chrome就会定位到对应的JavaScript代码处。


断点的设置很多时候都要特别设计，要考虑到不同事件的发生关系和处理次序。
比如click事件的触发，首先是mouseDown，然后mouseUp，最后才click。因此，例如象click事件的跟踪，就要先通过Chrome的Event listner 断点栏设置 click 断点，当click事件发生，程序终端之后，再设置断点到代码对应位置，然后继续执行程序，中断在对应位置。如果不按照这个次序处理，mouseDown事件就会中断，就不会再捕获到click事件了。


</description>
        <pubDate>Sun, 12 Jun 2016 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2016/06/12/debugjQuery.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2016/06/12/debugjQuery.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>JavaScript备忘</title>
        <description>&lt;h1 id=&quot;javascript&quot;&gt;JavaScript备忘(编辑中)&lt;/h1&gt;
&lt;p&gt;Many years ago, I learned JavaScript, at that time, which is a simple script. Years passed, the language has been very complicated, many concepts.&lt;/p&gt;

&lt;h2 id=&quot;object-oriented&quot;&gt;Object-Oriented&lt;/h2&gt;

&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;/h2&gt;

&lt;h2 id=&quot;promise&quot;&gt;Promise&lt;/h2&gt;

</description>
        <pubDate>Sun, 21 Jun 2015 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2015/06/21/JavaScript.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2015/06/21/JavaScript.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Angular 2试用记录（编辑中）</title>
        <description>&lt;h1 id=&quot;angular2&quot;&gt;Angular2试用记录&lt;/h1&gt;
&lt;p&gt;First touch Angular 2, after seeing many posts from G+.&lt;br /&gt;
Goto the website for Angular 2: angular.io&lt;br /&gt;
Check the docs: learn angular 2 in 5 mins.&lt;br /&gt;
    mkdir angul2learn
    cd angular2learn
    npm install -g tsd
message got:
npm WARN engine joi-assert@0.0.3: wanted: {“node”:”&amp;gt;= 0.10.0 &amp;lt;= 0.11.0”} (current: {“node”:”2.1.0”,”npm”:”2.10.1”})&lt;/p&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2015/06/10/%E8%AF%95%E7%94%A8Angular2.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2015/06/10/%E8%AF%95%E7%94%A8Angular2.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>css备忘（编辑中）</title>
        <description>&lt;h1 id=&quot;css&quot;&gt;CSS备忘&lt;/h1&gt;
&lt;p&gt;Notice: Please do not fully trust the following record, I’m just recording it, if there are some conflict with others, maybe I’m wrong.&lt;/p&gt;

&lt;h2 id=&quot;selectors&quot;&gt;selectors&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;1. &#39;.selector&#39; select for class, for example:
   .card {
      display:block;
   }
   which will affect:
   &amp;lt;div class=&quot;card&quot; ...
2. &#39;#selector&#39; select for id, for example:
   #card {
      display:block;
   }
   which will affect:
   &amp;lt;div id=&quot;card&quot; ....
3. &#39;(non start with [. #]selector&#39; seldct for tag, for example:
   h1 {
     ....
   }
   which will affect: 
   &amp;lt;h1&amp;gt; Hi! &amp;lt;/h1&amp;gt;
4. &#39;tagselector.selector&#39; is for tag and class, for example:
   h1.head-title {
     ...
   }
   which will affect:
   &amp;lt;h1 class=&quot;head-title&quot;&amp;gt;
5. &#39;selector selector&#39; is for selector inside selector, for example:
   div .head-title {
     ...
   }
   which will affect:
   &amp;lt;div&amp;gt;
     &amp;lt;span&amp;gt;
        &amp;lt;strong class=&#39;head-title&#39;&amp;gt;...
6. &#39;selector &amp;gt; selector&#39; is for element being direct child as element, for example:
   div.head-title&amp;gt;h1{
   ....
   }
   which will affect:
   &amp;lt;div class=&quot;head-title&quot;&amp;gt;&amp;lt;h1&amp;gt;....
7. &#39;selector, selector&#39; is an OR operation, just group the policy, for example:
   .head-title , .head-subtitle
   {
     ...
   }
   which will affect:
   &amp;lt;div class=&quot;head-title&amp;gt;&amp;lt;/div&amp;gt;
   and
   &amp;lt;div class=&quot;.head-subtitle&amp;gt;&amp;lt;/div&amp;gt;
8. @media
   The @media rule is used to define different style rules for different media types/devices.
   @media not|only mediatype and (media feature) {
    CSS-Code;
   } 
   for example:
   @media only screen and (max-width: 500px) {
       .gridmenu {
	   width:100%;
       }

       .gridmain {
	    width:100%;
       }

       .gridright {
	    width:100%;
           }
   }
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Wed, 10 Jun 2015 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2015/06/10/%E6%9C%80%E7%AE%80CSS.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2015/06/10/%E6%9C%80%E7%AE%80CSS.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Suggestions about NodeJS/AngularJS Web App</title>
        <description>&lt;h2 id=&quot;use-one-angularjs-app&quot;&gt;Use one AngularJS APP&lt;/h2&gt;
&lt;p&gt;That can contribute many benefits:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. PageState could be rememberred;
2. Less files
3. Easy to reuse existing code.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;rest-api-utilize-the-query&quot;&gt;REST api utilize the Query&lt;/h2&gt;
&lt;p&gt;It’s suggested to design requests in such style:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET /hotel?query=luxury&amp;amp;page=3&amp;amp;nPerPage=10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then both your query code of AngularJS and Sequelize/Mongoose code in nodeJS will all be shorter.&lt;/p&gt;

&lt;h2 id=&quot;to-be-continued&quot;&gt;To be continued&lt;/h2&gt;
</description>
        <pubDate>Sun, 31 May 2015 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2015/05/31/AngularJS%E5%92%8CNodeJS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%82%E7%82%B9.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2015/05/31/AngularJS%E5%92%8CNodeJS%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A7%82%E7%82%B9.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>关于AngularJS（编辑中）</title>
        <description>&lt;h2 id=&quot;datefmt-error&quot;&gt;‘datefmt’ error&lt;/h2&gt;
&lt;p&gt;When Resource.get() return an object from remote, the Date property will be String, AngularJS will not automatically transfom it. You could transform it by transformResponse. I provide another solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;use strict&#39;;
var ahbHotelService = angular.module(&#39;ahbHotelService&#39;,[&#39;ngResource&#39;]);
ahbHotelService.factory(&#39;Hotel&#39;,[&#39;$resource&#39;,function($resource){

    var AHBHotel = $resource(&#39;/api/hotel/:id&#39;,{},{
        query:{method:&#39;GET&#39;,params:{id:&#39;&#39;},isArray:true}
    });

    var protoGet = AHBHotel.get;
    AHBHotel.get = function(params){
        var result =  protoGet(params);
        result.$promise.then(function(){
            result.created = new Date(result.created);
        });
        return result;
    };
    return AHBHotel;
}]);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;watch-is-shallow&quot;&gt;watch is shallow&lt;/h2&gt;
&lt;p&gt;Oh, it’s just a little hint!&lt;/p&gt;

&lt;h2 id=&quot;id-selector-was-executed-automatically&quot;&gt;id selector was executed automatically&lt;/h2&gt;

&lt;p&gt;For those elements with id property, a variable named same as the id property’s value could be called directly.
For example:
&amp;lt;div id=”id1”…&lt;/p&gt;

&lt;p&gt;app.controller(‘ctrl’,function($scope){
    id1……&lt;/p&gt;

&lt;p&gt;which work! &lt;/p&gt;

</description>
        <pubDate>Tue, 19 May 2015 06:29:47 +0800</pubDate>
        <link>http://changdao.github.io/jekyll/update/2015/05/19/%E5%85%B3%E4%BA%8EAngularJS.html</link>
        <guid isPermaLink="true">http://changdao.github.io/jekyll/update/2015/05/19/%E5%85%B3%E4%BA%8EAngularJS.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
